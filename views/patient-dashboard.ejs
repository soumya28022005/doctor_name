<%- include('partials/header.ejs') %>

<div class="dashboard-header">
    <h1>Welcome, <%= patient.name %></h1>
    <p>Find doctors and book your appointments.</p>
</div>

<div class="dashboard-grid">
    <!-- Doctor Search -->
    <div class="card">
        <h3>Find a Doctor</h3>
        <div class="form-group">
            <input type="text" id="doctorNameSearch" onkeyup="searchDoctors()" placeholder="Search by name...">
        </div>
        <div class="form-group">
            <input type="text" id="specialtySearch" onkeyup="searchDoctors()" placeholder="Search by specialty (e.g., Dentist)...">
        </div>
        <div class="form-group">
            <input type="text" id="clinicSearch" onkeyup="searchDoctors()" placeholder="Search by clinic name or place...">
        </div>
        <div class="form-group">
            <label>Select Date to See Availability</label>
            <input type="date" id="dateSearch" onchange="searchDoctors()">
        </div>
        <div id="doctorSearchResults" style="margin-top: 20px;"></div>
    </div>

    <!-- Enhanced Patient Appointments with Live Queue Status -->
    <div class="card">
        <h3>Your Appointments & Live Queue Status</h3>
        
        <% if(appointments.length > 0) { %>
            <% appointments.forEach(app => { %>
                <!-- Notice the change from app.doctorName to app.doctor_name, etc. -->
                <div class="appointment-item" style="position: relative; padding: 1.5rem; margin-bottom: 1rem; border-radius: 8px; background: #f8fafc;">
                    <!-- Appointment Header -->
                    <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 1rem;">
                        <div>
                            <h4 style="color: #1e293b; margin: 0 0 0.5rem 0;"><%= app.doctor_name %></h4>
                            <p style="color: #64748b; margin: 0; font-size: 0.95rem;">
                                üìÖ <%= new Date(app.date).toLocaleDateString() %> at <%= app.time %> | üìç <%= app.clinic_name %>
                            </p>
                        </div>
                        <div style="text-align: right;">
                            <span style="background: #3b82f6; color: white; padding: 0.25rem 0.75rem; border-radius: 20px; font-weight: bold; font-size: 0.9rem;">
                                Queue #<%= app.queue_number %>
                            </span>
                        </div>
                    </div>

                    <!-- Live Queue Status -->
                    <!-- CORRECTED: Using snake_case for data attributes -->
                   <div class="live-queue-status" data-appointment-id="<%= app.id %>" data-doctor-id="<%= app.doctor_id %>" data-clinic-id="<%= app.clinic_id %>" data-queue-number="<%= app.queue_number %>">
                        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 1rem; border-radius: 8px; text-align: center;">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div>
                                    <div class="current-status-text" style="font-size: 1.1rem; font-weight: 600;">
                                        Loading queue status...
                                    </div>
                                    <div class="queue-info" style="font-size: 0.9rem; opacity: 0.9; margin-top: 0.25rem;"></div>
                                </div>
                                <div class="pulse-indicator" style="width: 12px; height: 12px; background: #22c55e; border-radius: 50%; animation: pulse 2s infinite;"></div>
                            </div>
                        </div>
                        
                        <!-- Estimated Time -->
                        <div class="estimated-time" style="background: #fef3c7; color: #d97706; padding: 0.75rem; text-align: center; font-size: 0.9rem; font-weight: 500; border-radius: 0 0 8px 8px;">
                        </div>
                    </div>
                </div>
            <% }) %>
        <% } else { %>
            <div style="text-align: center; padding: 3rem; color: #64748b;">
                <div style="font-size: 3rem; margin-bottom: 1rem;">üìÖ</div>
                <p style="font-size: 1.2rem; margin: 0;">You have no appointments scheduled.</p>
                <p style="margin: 0.5rem 0 0 0;">Book your first appointment using the search above!</p>
            </div>
        <% } %>
    </div>
</div>

<script>
    // Set date input to today by default
    document.getElementById('dateSearch').value = new Date().toISOString().slice(0, 10);

    async function searchDoctors() {
        const name = document.getElementById('doctorNameSearch').value;
        const specialty = document.getElementById('specialtySearch').value;
        const clinic = document.getElementById('clinicSearch').value;
        const date = document.getElementById('dateSearch').value;
        const resultsContainer = document.getElementById('doctorSearchResults');

        if (!date) {
            resultsContainer.innerHTML = '<p style="color:red;">Please select a date to see availability.</p>';
            return;
        }

        let query = [`date=${date}`];
        if (name) query.push(`name=${name}`);
        if (specialty) query.push(`specialty=${specialty}`);
        if (clinic) query.push(`clinic=${clinic}`);

        try {
            const response = await fetch(`/api/doctors?${query.join('&')}`);
            if (!response.ok) throw new Error('Network response was not ok');
            const doctors = await response.json();

            resultsContainer.innerHTML = '';
            if (doctors.length > 0) {
                doctors.forEach(doctor => {
                    const doctorDiv = document.createElement('div');
                    doctorDiv.className = 'appointment-item';
                    doctorDiv.innerHTML = `<h4>${doctor.name} - ${doctor.specialty}</h4>`;
                    
                    doctor.schedules.forEach(schedule => {
                        let bookingFormHTML = `<p><b>${schedule.clinic.name}</b> (${schedule.startTime} - ${schedule.endTime})</p>`;
                        
                        bookingFormHTML += `
                        <form action="/book-appointment" method="POST">
                            <input type="hidden" name="patientId" value="<%= patient.id %>">
                            <input type="hidden" name="doctorId" value="${doctor.id}">
                            <input type="hidden" name="clinicId" value="${schedule.clinicId}">
                            <input type="hidden" name="date" value="${date}">
                            <button type="submit" class="btn">Book Appointment</button>
                        </form>`;

                        doctorDiv.innerHTML += bookingFormHTML;
                    });
                    resultsContainer.appendChild(doctorDiv);
                });
            } else {
                resultsContainer.innerHTML = '<p>No doctors found with the specified criteria.</p>';
            }
        } catch (error) {
            console.error('Fetch error:', error);
            resultsContainer.innerHTML = '<p style="color: red;">Error loading doctors. Please try again.</p>';
        }
    }

      async function updateLiveQueueStatus() {
        const queueElements = document.querySelectorAll('.live-queue-status');
        for (const element of queueElements) {
            const doctorId = element.dataset.doctorId;
            const clinicId = element.dataset.clinicId;
            const queueNumber = parseInt(element.dataset.queueNumber);

            try {
                // This API call should now work because doctorId and clinicId are correct
                const response = await fetch(`/api/queue-status/${doctorId}/${clinicId}`);
                 if (!response.ok) throw new Error(`API returned status ${response.status}`);
                const queueData = await response.json();

                const statusText = element.querySelector('.current-status-text');
                const queueInfo = element.querySelector('.queue-info');
                const estimatedTime = element.querySelector('.estimated-time');
                const indicator = element.querySelector('.pulse-indicator');

                let message = '';
                let info = '';
                let timeInfo = '';
                let indicatorColor = '#64748b'; // Grey as default

                if (queueData.currentNumber === 0) {
                    message = 'üïê Queue has not started yet';
                    info = `You are #${queueNumber} in line`;
                    timeInfo = 'Please arrive 15 minutes before your scheduled time';
                } else if (queueNumber <= queueData.currentNumber) {
                    message = '‚úÖ Your turn is over';
                    info = 'Please contact the clinic if you have missed your turn';
                    indicatorColor = '#22c55e'; // Green
                    timeInfo = 'Contact the clinic for rescheduling if needed';
                } else if (queueNumber === queueData.currentNumber + 1) {
                    message = "üéØ You're NEXT!";
                    info = `Currently serving #${queueData.currentNumber}`;
                    indicatorColor = '#f59e0b'; // Amber
                    timeInfo = '‚ö†Ô∏è Please be ready and wait near the clinic';
                } else {
                    const patientsAhead = queueNumber - queueData.currentNumber - 1;
                    message = `‚è≥ ${patientsAhead} patients ahead of you`;
                    info = `Currently serving #${queueData.currentNumber}`;
                    const estimatedMinutes = patientsAhead * 15; // Assuming 15 mins per patient
                    timeInfo = `Estimated wait: ~${estimatedMinutes} minutes`;
                    indicatorColor = '#3b82f6'; // Blue for waiting
                }

                statusText.textContent = message;
                queueInfo.textContent = info;
                estimatedTime.textContent = timeInfo;
                indicator.style.background = indicatorColor;

            } catch (error) {
                console.error("Queue Status Error:", error); // Log the actual error
                const statusText = element.querySelector('.current-status-text');
                const queueInfo = element.querySelector('.queue-info');
                statusText.textContent = '‚ùå Unable to load queue status';
                queueInfo.textContent = 'Please refresh the page or contact the clinic';
            }
        }
    }


    // Initial load and periodic updates
    document.addEventListener('DOMContentLoaded', () => {
        searchDoctors(); // Also run search on page load
        updateLiveQueueStatus();
        // Update every 15 seconds for real-time experience
        setInterval(updateLiveQueueStatus, 15000);
        
        // Also update when page becomes visible again
        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'visible') {
                updateLiveQueueStatus();
            }
        });
    });

    // Add pulse animation
    const style = document.createElement('style');
    style.textContent = `
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        .live-queue-status {
            transition: all 0.3s ease;
        }
        
        .live-queue-status:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
    `;
    document.head.appendChild(style);
</script>

<%- include('partials/footer.ejs') %>
